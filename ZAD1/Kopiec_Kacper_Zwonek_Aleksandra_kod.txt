import numpy as np

class Float(float):
    add_counter = 0
    sub_counter = 0
    mul_counter = 0
    div_counter = 0

    def __new__(cls, value):
        return super().__new__(cls, value)
    
    def __add__(self, value):
        Float.add_counter += 1
        return Float(super().__add__(value))
    
    def __radd__(self, value):
        Float.add_counter += 1
        return Float(super().__radd__(value))
    
    def __sub__(self, value):
        Float.sub_counter += 1
        return Float(super().__sub__(value))
    
    def __rsub__(self, value):
        Float.sub_counter += 1
        return Float(super().__rsub__(value))
    
    def __mul__(self, value):
        Float.mul_counter += 1
        return Float(super().__mul__(value))
    
    def __rmul__(self, value):
        Float.mul_counter += 1
        return Float(super().__rmul__(value))
    
    def __truediv__(self, value):
        Float.div_counter += 1
        return Float(super().__truediv__(value))
    
    def __rtruediv__(self, value):
        Float.div_counter += 1
        return Float(super().__rtruediv__(value))
    
    @staticmethod
    def reset():
        Float.add_counter = 0
        Float.sub_counter = 0
        Float.mul_counter = 0
        Float.div_counter = 0

def binet_without_padding(X: np.ndarray, Y: np.ndarray):
    n, k = X.shape
    _, m = Y.shape

    if min(n, k, m) == 1:
        return X @ Y
    
    n //= 2
    m //= 2
    k //= 2

    X11 = X[:n, :k]
    X12 = X[:n, k:]
    X21 = X[n:, :k]
    X22 = X[n:, k:]
    Y11 = Y[:k, :m]
    Y12 = Y[:k, m:]
    Y21 = Y[k:, :m]
    Y22 = Y[k:, m:]

    Z11 = binet_without_padding(X11, Y11) + binet_without_padding(X12, Y21)
    Z12 = binet_without_padding(X11, Y12) + binet_without_padding(X12, Y22)
    Z21 = binet_without_padding(X21, Y11) + binet_without_padding(X22, Y21)
    Z22 = binet_without_padding(X21, Y12) + binet_without_padding(X22, Y22)

    top = np.hstack((Z11, Z12), dtype=Float)
    bot = np.hstack((Z21, Z22), dtype=Float)
    return np.vstack((top, bot), dtype=Float)  

def strassen_without_padding(A: np.ndarray, B: np.ndarray):
    n = A.shape[0]
    if n == 1:
        return A @ B
    
    if n % 2 != 0:
        m = n - 1

        A11 = A[:m, :m]
        a12 = A[:m, m:]
        a21 = A[m:, :m]
        a22 = A[m:, m:]

        B11 = B[:m, :m]
        b12 = B[:m, m:]
        b21 = B[m:, :m]
        b22 = B[m:, m:]

        C11 = strassen_without_padding(A11, B11) + a12 @ b21
        C12 = A11 @ b12 + a12 @ b22
        C21 = a21 @ B11 + a22 @ b21
        C22 = a21 @ b12 + a22 @ b22

        top = np.hstack((C11, C12), dtype=Float)
        bot = np.hstack((C21, C22), dtype=Float)
        return np.vstack((top, bot), dtype=Float)
    
    n //= 2
    X11 = A[:n, :n]
    X12 = A[:n, n:]
    X21 = A[n:, :n] 
    X22 = A[n:, n:]
    Y11 = B[:n, :n] 
    Y12 = B[:n, n:]
    Y21 = B[n:, :n] 
    Y22 = B[n:, n:]

    P1 = strassen_without_padding(X11 + X22, Y11 + Y22) 
    P2 = strassen_without_padding(X21 + X22, Y11)
    P3 = strassen_without_padding(X11, Y12 - Y22)
    P4 = strassen_without_padding(X22, Y21 - Y11)
    P5 = strassen_without_padding(X11 + X12, Y22)
    P6 = strassen_without_padding(X21 - X11, Y11 + Y12)
    P7 = strassen_without_padding(X12 - X22, Y21 + Y22)
    Z11 = P1 + P4 - P5 + P7
    Z12 = P3 + P5
    Z21 = P2 + P4
    Z22 = P1 - P2 + P3 + P6

    top = np.hstack((Z11, Z12), dtype=Float)
    bot = np.hstack((Z21, Z22), dtype=Float)
    return np.vstack((top, bot), dtype=Float)

def Ai(A, B):
    n, k = A.shape
    _, m = B.shape

    if min(n, m, k) <= 1:
        return A @ B

    n //= 4
    m //= 5
    k //= 5

    a11 = A[:n,:m]
    a12 = A[:n,m:2*m]
    a13 = A[:n,2*m:3*m]
    a14 = A[:n,3*m:4*m]
    a15 = A[:n,4*m:]

    a21 = A[n:2*n,:m]
    a22 = A[n:2*n,m:2*m]
    a23 = A[n:2*n,2*m:3*m]
    a24 = A[n:2*n,3*m:4*m]
    a25 = A[n:2*n,4*m:]

    a31 = A[2*n:3*n,:m]
    a32 = A[2*n:3*n,m:2*m]
    a33 = A[2*n:3*n,2*m:3*m]
    a34 = A[2*n:3*n,3*m:4*m]
    a35 = A[2*n:3*n,4*m:]    

    a41 = A[3*n:,:m]
    a42 = A[3*n:,m:2*m]
    a43 = A[3*n:,2*m:3*m]
    a44 = A[3*n:,3*m:4*m]
    a45 = A[3*n:,4*m:]

    b11 = B[:m,:k]
    b12 = B[:m,k:2*k]
    b13 = B[:m,2*k:3*k]
    b14 = B[:m,3*k:4*k]
    b15 = B[:m,4*k:]

    b21 = B[m:2*m,:k]
    b22 = B[m:2*m,k:2*k]
    b23 = B[m:2*m,2*k:3*k]
    b24 = B[m:2*m,3*k:4*k]
    b25 = B[m:2*m,4*k:]

    b31 = B[2*m:3*m,:k]
    b32 = B[2*m:3*m,k:2*k]
    b33 = B[2*m:3*m,2*k:3*k]
    b34 = B[2*m:3*m,3*k:4*k]
    b35 = B[2*m:3*m,4*k:]

    b41 = B[3*m:4*m,:k]
    b42 = B[3*m:4*m,k:2*k]
    b43 = B[3*m:4*m,2*k:3*k]
    b44 = B[3*m:4*m,3*k:4*k]
    b45 = B[3*m:4*m,4*k:]

    b51 = B[4*m:,:k]
    b52 = B[4*m:,k:2*k]
    b53 = B[4*m:,2*k:3*k]
    b54 = B[4*m:,3*k:4*k]
    b55 = B[4*m:,4*k:]

    h1  = Ai(a32 , -b21 - b25 - b31)
    h2  = Ai(a22 + a25 - a35, -b25 - b51)
    h3  = Ai(-a31 - a41 + a42, -b11 + b25)
    h4  = Ai(a12 + a14 + a34, -b25 - b41)
    h5  = Ai(a15 + a22 + a25, -b24 + b51)
    h6  = Ai(-a22 - a25 - a45, b23 + b51)
    h7  = Ai(-a11 + a41 - a42, b11 + b24)
    h8  = Ai(a32 - a33 - a43, -b23 + b31)
    h9  = Ai(-a12 - a14 + a44, b23 + b41)
    h10 = Ai(a22 + a25,  b51)
    h11 = Ai(-a21 - a41 + a42, -b11 + b22)
    h12 = Ai(a41 - a42, b11)
    h13 = Ai(a12 + a14 + a24, b22 + b41)
    h14 = Ai(a13 - a32 + a33, b24 + b31)
    h15 = Ai(-a12 - a14, b41)
    h16 = Ai(-a32 + a33, b31)
    h17 = Ai(a12 + a14 - a21 + a22 - a23 + a24 - a32 + a33 - a41 + a42,  b22)
    h18 = Ai(a21, b11 + b12 + b52)
    h19 = Ai(-a23, b31 + b32 + b52)
    h20 = Ai(-a15 + a21 + a23 - a25, -b11 - b12 + b14 - b52)
    h21 = Ai(a21 + a23 - a25, b52)
    h22 = Ai(a13 - a14 - a24, b11 + b12 - b14 - b31 - b32 + b34 + b44)
    h23 = Ai(a13, -b31 + b34 + b44)
    h24 = Ai(a15, -b44 - b51 + b54)
    h25 = Ai(-a11, b11 - b14)
    h26 = Ai(-a13 + a14 + a15, b44)
    h27 = Ai(a13 - a31 + a33, b11 - b14 + b15 + b35)
    h28 = Ai(-a34, -b35 - b41 - b45)
    h29 = Ai(a31, b11 + b15 + b35)
    h30 = Ai(a31 - a33 + a34, b35)
    h31 = Ai(-a14 - a15 - a34, -b44 - b51 + b54 - b55)
    h32 = Ai(a21 + a41 + a44, b13 - b41 - b42 - b43)
    h33 = Ai(a43, -b31 - b33)
    h34 = Ai(a44, -b13 + b41 + b43)
    h35 = Ai(-a45, b13 + b51 + b53)
    h36 = Ai(a23 - a25 - a45, b31 + b32 + b33 + b52)
    h37 = Ai(-a41 - a44 + a45,  b13)
    h38 = Ai(-a23 - a31 + a33 - a34, b35 + b41 + b42 + b45)
    h39 = Ai(-a31 - a41 - a44 + a45, b13 + b51 + b53 + b55)
    h40 = Ai(-a13 + a14 + a15 - a44, -b31 - b33 + b34 + b44)
    h41 = Ai(-a11 + a41 - a45, b13 + b31 + b33 - b34 + b51 + b53 - b54)
    h42 = Ai(-a21 + a25 - a35, -b11 - b12 - b15 + b41 + b42 + b45 - b52)
    h43 = Ai(a24, b41 + b42)
    h44 = Ai(a23 + a32 - a33, b22 - b31)
    h45 = Ai(-a33 + a34 - a43, b35 + b41 + b43 + b45 + b51 + b53 + b55)
    h46 = Ai(-a35, -b51 - b55)
    h47 = Ai(a21 - a25 - a31 + a35, b11 + b12 + b15 - b41 - b42 - b45)
    h48 = Ai(-a23 + a33, b22 + b32 + b35 + b41 + b42 + b45)
    h49 = Ai(-a11 - a13 + a14 + a15 - a21 - a23 + a24 + a25, -b11 - b12 + b14)
    h50 = Ai(-a14 - a24, b22 - b31 - b32 + b34 - b42 + b44)
    h51 = Ai(a22, b21 + b22 - b51)
    h52 = Ai(a42, b11 + b21 + b23)
    h53 = Ai(-a12, -b21 + b24 + b41)
    h54 = Ai(a12 + a14 - a22 - a25 - a32 + a33 - a42 + a43 - a44 - a45, b23)
    h55 = Ai(a14 - a44, -b23 + b31 + b33 - b34 + b43 - b44)
    h56 = Ai(a11 - a15 - a41 + a45, b31 + b33 - b34 + b51 + b53 - b54)
    h57 = Ai(-a31 - a41, -b13 - b15 - b25 - b51 - b53 - b55)
    h58 = Ai(-a14 - a15 - a34 - a35, -b51 + b54 - b55)
    h59 = Ai(-a33 + a34 - a43 + a44, b41 + b43 + b45 + b51 + b53 + b55)
    h60 = Ai(a25 + a45, b23 - b31 - b32 - b33 - b52 - b53)
    h61 = Ai(a14 + a34, b11 - b14 + b15 - b25 - b44 + b45 - b51 + b54 - b55)
    h62 = Ai(a21 + a41, b12 + b13 + b22 - b41 - b42 - b43)
    h63 = Ai(-a33 - a43, -b23 - b33 - b35 - b41 - b43 - b45)
    h64 = Ai(a11 - a13 - a14 + a31 - a33 - a34, b11 - b14 + b15)
    h65 = Ai(-a11 + a41, -b13 + b14 + b24 - b51 - b53 + b54)
    h66 = Ai(a11 - a12 + a13 - a15 - a22 - a25 - a32 + a33 - a41 + a42,  b24)
    h67 = Ai(a25 - a35, b11 + b12 + b15 - b25 - b41 - b42 - b45 + b52 + b55)
    h68 = Ai(a11 + a13 - a14 - a15 - a41 - a43 + a44 + a45, -b31 - b33 + b34)
    h69 = Ai(-a13 + a14 - a23 + a24, -b24 - b31 - b32 + b34 - b52 + b54)
    h70 = Ai(a23 - a25 + a43 - a45, -b31 - b32 - b33)
    h71 = Ai(-a31 + a33 - a34 + a35 - a41 + a43 - a44 + a45, -b51 - b53 - b55)
    h72 = Ai(-a21 - a24 - a41 - a44, b41 + b42 + b43)
    h73 = Ai(a13 - a14 - a15 + a23 - a24 - a25, b11 + b12 - b14 + b24 + b52 - b54)
    h74 = Ai(a21 - a23 + a24 - a31 + a33 - a34, b41 + b42 + b45)
    h75 = -Ai(a12 + a14 - a22 - a25 - a31 + a32 + a34 + a35 - a41 + a42, b25)
    h76 = Ai(a13 + a33, -b11 + b14 - b15 + b24 + b34 - b35)

    c11 = -h10 + h12 + h14 - h15 - h16 + h53 + h5 - h66 - h7
    c21 = h10 + h11 - h12 + h13 + h15 + h16 - h17 - h44 + h51
    c31 = h10 - h12 + h15 + h16 - h1 + h2 + h3 - h4 + h75
    c41 = -h10 + h12 - h15 - h16 + h52 + h54 - h6 - h8 + h9
    c12 = h13 + h15 + h20 + h21 - h22 + h23 + h25 - h43 + h49 + h50
    c22 = -h11 + h12 - h13 - h15 - h16 + h17 + h18 - h19 - h21 + h43 + h44
    c32 = -h16 - h19 - h21 - h28 - h29 - h38 + h42 + h44 - h47 + h48
    c42 = h11 - h12 - h18 + h21 - h32 + h33 - h34 - h36 + h62 - h70
    c13 = h15 + h23 + h24 + h34 - h37 + h40 - h41 + h55 - h56 - h9
    c23 = -h10 + h19 + h32 + h35 + h36 + h37 - h43 - h60 - h6 - h72
    c33 = -h16 - h28 + h33 + h37 - h39 + h45 - h46 + h63 - h71 - h8
    c43 = h10 + h15 + h16 - h33 + h34 - h35 - h37 - h54 + h6 + h8 - h9
    c14 = -h10 + h12 + h14 - h16 + h23 + h24 + h25 + h26 + h5 - h66 - h7
    c24 = h10 + h18 - h19 + h20 - h22 - h24 - h26 - h5 - h69 + h73
    c34 = -h14 + h16 - h23 - h26 + h27 + h29 + h31 + h46 - h58 + h76
    c44 = h12 + h25 + h26 - h33 - h35 - h40 + h41 + h65 - h68 - h7
    c15 = h15 + h24 + h25 + h27 - h28 + h30 + h31 - h4 + h61 + h64
    c25 = -h10 - h18 - h2 - h30 - h38 + h42 - h43 + h46 + h67 + h74
    c35 = -h10 + h12 - h15 + h28 + h29 - h2 - h30 - h3 + h46 + h4 - h75
    c45 = -h12 - h29 + h30 - h34 + h35 + h39 + h3 - h45 + h57 + h59

    C = np.zeros((4*n,5*k), dtype=Float)
    C[:n,:k]            = c11
    C[:n,k:2*k]         = c12
    C[:n,2*k:3*k]       = c13
    C[:n,3*k:4*k]       = c14
    C[:n,4*k:]          = c15
    
    C[n:2*n,:k]         = c21
    C[n:2*n,k:2*k]      = c22
    C[n:2*n,2*k:3*k]    = c23
    C[n:2*n,3*k:4*k]    = c24
    C[n:2*n,4*k:]       = c25

    C[2*n:3*n,:k]       = c31
    C[2*n:3*n,k:2*k]    = c32
    C[2*n:3*n,2*k:3*k]  = c33
    C[2*n:3*n,3*k:4*k]  = c34
    C[2*n:3*n,4*k:]     = c35

    C[3*n:,:k]          = c41
    C[3*n:,k:2*k]       = c42
    C[3*n:,2*k:3*k]     = c43
    C[3*n:,3*k:4*k]     = c44
    C[3*n:,4*k:]        = c45

    return C